package ca.sfu.cmpt275.calendarapp.calendar;

import ca.sfu.cmpt275.calendarapp.reports.Report;
import ca.sfu.cmpt275.calendarapp.util.FileManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;

/*
Description: - holds the main template for the calendar
             - holds the functionality to have access to task blocks and study schedules generated by TaskManager

References: [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19],
[20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36],
[37], [38], [39], [40], [41], [42], [43], [44], [45], [46], [47], [48], [49], [50], [51], [52], [53],
[54], [55], [56], [57], [58] , [69], [70], [71], [72], [73], [74], [75], [76]
 */

public class CalendarGUI implements ActionListener{
    private JFrame frame;
    private JLayeredPane mainLayerPane;
    static private DayPanel[] panelDays;
    private GeneralInfoPanel hourTicksPanel;

    private final int width = 1000;
    private final int height = 800;
    private final int numDays = 7;
    private final int panelWidths = width / (numDays+1); // plus one for the hour panel
    private int panelHeights;

    private  JMenuBar menuBar;
    private JMenu taskMenu;
    private JMenuItem addCourse;
    private JMenuItem deleteCourse;
    private JMenuItem editCourse;
    private JMenuItem viewCourse;
    private JMenuItem generateSchedule;
    private JMenuItem clearSchedule;
    private JComboBox dayToSelect;
    private JMenu reportMenu;
    private JMenuItem generateReportItem;
    private JMenuItem nextWeek;
    private JMenuItem previousWeek;
    private JMenu fileMenu;
    private JMenuItem saveItem;
    private JMenuItem closeItem;
    private JMenu viewMenu;
    static private ArrayList<String> coursesList;
    static private ArrayList<Color> coursesColorList;
    static private int colourCounter;
    private int weekNumber;
    private Calendar currentMonday;
    static private Calendar thisWeeksMonday;

    static private final int startHr = 8;
    static private final int maxHourAllowed = 19;
    static private final int maxMinValue = 60;

    static private ArrayList<TaskBlock> studyBlocksList;

    public CalendarGUI() {
        frame = new JFrame();
        mainLayerPane = new JLayeredPane();
        panelDays = new DayPanel[numDays];
        panelHeights = height / DayPanel.getNumTimes();
        mainLayerPane.setBounds(0,0,width,height);
        frame.add(mainLayerPane);

        colourCounter = 0;
        weekNumber = 0;
        coursesList = new ArrayList<>();
        coursesColorList = new ArrayList<>();

        studyBlocksList = new ArrayList<>();

        String dateList[] = new String[7];
        dateList[0] = "Mon";
        dateList[1] = "Tues";
        dateList[2] = "Wed";
        dateList[3] = "Thurs";
        dateList[4] = "Fri";
        dateList[5] = "Sat";
        dateList[6] = "Sun";

        hourTicksPanel = new GeneralInfoPanel(panelWidths, panelHeights, height,mainLayerPane,0);
        mainLayerPane.add(hourTicksPanel, JLayeredPane.DEFAULT_LAYER);

        //We will consider the current week as the starting point for the GUI
        String dayOfWeek = String.valueOf(LocalDate.now().getDayOfWeek());
        int dateOfMonth = 0;
        int year = 0;
        int month = 0;

        //Get the date of the monday of this week so we can use that as the starting value
        if(dayOfWeek == "MONDAY"){
            dateOfMonth = LocalDate.now().getDayOfMonth();
            year = LocalDate.now().getYear();
            month = LocalDate.now().getMonthValue();
        }
        else if (dayOfWeek == "TUESDAY"){
            dateOfMonth =  LocalDate.now().minusDays(1).getDayOfMonth();
            month = LocalDate.now().minusDays(1).getMonthValue();
            year = LocalDate.now().minusDays(1).getYear();
        }
        else if (dayOfWeek == "WEDNESDAY"){
            dateOfMonth =  LocalDate.now().minusDays(2).getDayOfMonth();
            month = LocalDate.now().minusDays(2).getMonthValue();
            year = LocalDate.now().minusDays(2).getYear();
        }
        else if (dayOfWeek == "THURSDAY"){
            dateOfMonth =  LocalDate.now().minusDays(3).getDayOfMonth();
            month = LocalDate.now().minusDays(3).getMonthValue();
            year = LocalDate.now().minusDays(3).getYear();
        }
        else if (dayOfWeek == "FRIDAY"){
            dateOfMonth =  LocalDate.now().minusDays(4).getDayOfMonth();
            month = LocalDate.now().minusDays(4).getMonthValue();
            year = LocalDate.now().minusDays(4).getYear();
        }
        else if (dayOfWeek == "SATURDAY"){
            dateOfMonth =  LocalDate.now().minusDays(5).getDayOfMonth();
            month = LocalDate.now().minusDays(5).getMonthValue();
            year = LocalDate.now().minusDays(5).getYear();
        }
        else if (dayOfWeek == "SUNDAY"){
            dateOfMonth =  LocalDate.now().minusDays(6).getDayOfMonth();
            month = LocalDate.now().minusDays(6).getMonthValue();
            year = LocalDate.now().minusDays(6).getYear();
        }

        //Saving this starting point as a date object and in other objects for further use:
        Calendar calendar_Date = Calendar.getInstance();
        calendar_Date.set(Calendar.YEAR, year);
        calendar_Date.set(Calendar.MONTH,month-1); //Minus one because date returns from [1,12], but Calendar uses from [0,11]
        calendar_Date.set(Calendar.DAY_OF_MONTH, dateOfMonth);
        calendar_Date.set(Calendar.HOUR_OF_DAY, 8);
        calendar_Date.set(Calendar.MINUTE, 0);
        calendar_Date.set(Calendar.SECOND, 0);
        this.currentMonday = (Calendar)calendar_Date.clone();
        this.thisWeeksMonday = (Calendar)calendar_Date.clone();

        for (int day = 0; day < numDays; day++) {
            panelDays[day] = new DayPanel(panelWidths, panelHeights, height, mainLayerPane, (day+1)*panelWidths, dateList[day],calendar_Date);
            mainLayerPane.add(panelDays[day], JLayeredPane.DEFAULT_LAYER);
            calendar_Date.add(Calendar.DATE, 1);
        }

        menuBar = new JMenuBar();
        frame.setJMenuBar(menuBar);

        fileMenu = new JMenu("File");
        menuBar.add(fileMenu);
        taskMenu = new JMenu("Update Calendar");
        menuBar.add(taskMenu);
        reportMenu = new JMenu("Report");
        menuBar.add(reportMenu);
        viewMenu = new JMenu("Week Viewed");
        menuBar.add(viewMenu);

        saveItem = new JMenuItem("Save");
        fileMenu.add(saveItem);
        closeItem = new JMenuItem("Close");
        fileMenu.add(closeItem);

        generateSchedule = new JMenuItem("Generate Study Schedule");
        taskMenu.add(generateSchedule);
        clearSchedule = new JMenuItem("Clear Study Schedule");
        taskMenu.add(clearSchedule);
        addCourse = new JMenuItem("Add Course");
        taskMenu.add(addCourse);
        editCourse = new JMenuItem("Edit Course");
        taskMenu.add(editCourse);
        deleteCourse = new JMenuItem("Delete Course");
        taskMenu.add(deleteCourse);
        viewCourse = new JMenuItem("View Course");
        taskMenu.add(viewCourse);
        nextWeek = new JMenuItem("View Next Week");
        viewMenu.add(nextWeek);
        previousWeek = new JMenuItem("View Previous Week");
        viewMenu.add(previousWeek);

        generateReportItem = new JMenuItem("Generate Report");
        reportMenu.add(generateReportItem);

        saveItem.addActionListener(this);
        closeItem.addActionListener(this);
        generateSchedule.addActionListener(this);
        generateReportItem.addActionListener(this);
        addCourse.addActionListener(this);
        deleteCourse.addActionListener(this);
        editCourse.addActionListener(this);
        nextWeek.addActionListener(this);
        previousWeek.addActionListener(this);
        clearSchedule.addActionListener(this);
        viewCourse.addActionListener(this);

        frame.addWindowListener(new WindowAdapter() { // Alert user upon attempting to exit program
            public void windowClosing(WindowEvent e) {
                closeFrameAttempt(frame);
            }
        });

        frame.setLayout(null);
        frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE); //to ensure window closes properly
        frame.setVisible(true);
        frame.pack();
        frame.setSize(width, height);
    }

    private void closeFrameAttempt(JFrame frame) {
        int confirmation = JOptionPane.showConfirmDialog(frame, "Have you saved your changes?", "Exit Program", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.CLOSED_OPTION || confirmation == JOptionPane.NO_OPTION) {
            return;
        }
        if (confirmation == JOptionPane.YES_OPTION) {
            frame.dispose();
            System.exit(0);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == saveItem) {
            try {
                FileManager.save("", FileManager.FILE_NAME);
                JOptionPane.showMessageDialog(frame, "Calendar saved successfully.", "Save Calendar", JOptionPane.PLAIN_MESSAGE);
            } catch (Exception err) {
                JOptionPane.showMessageDialog(frame, "Unable to save calendar!", "Save Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (e.getSource() == closeItem) {
            closeFrameAttempt(frame);
        }
        if(e.getSource() == generateSchedule){
            studyBlocksList.clear();

            int t_sec = 60000*60*11;
            TaskManager.setMaxTotalStudyTimePerDayMilliseconds(t_sec);

            studyBlocksList.addAll(TaskManager.scheduler(this.currentMonday, 14));

            for(int i = 0; i < numDays; i++){
                panelDays[i].addStudyBlocks();
            }
        }
        if(e.getSource() == generateReportItem){
            Calendar endThisWeek = (Calendar)this.thisWeeksMonday.clone();
            endThisWeek.set(Calendar.DATE, 7);
            popUpReport();
        }
        if(e.getSource() == addCourse){
            CourseAddPopUpMenuItem();
        }
        if(e.getSource() == deleteCourse){
            CourseDeletePopUpMenuItem();
        }
        if(e.getSource() == editCourse){
            CourseEditPopUpMenuItem();
        }
        if(e.getSource() == nextWeek){
            getNextWeek();
        }
        if(e.getSource() == previousWeek){
            getPreviousWeek();
        }
        if(e.getSource() == clearSchedule){
            for(int i = 0; i < numDays; i++){
                panelDays[i].removeStudyBlocks();
                studyBlocksList.clear();
            }
        }
        if(e.getSource() == viewCourse){
            viewCoursePopUp();
        }
    }

    static public ArrayList<TaskBlock> getSpecificDayStudyBlocks(Calendar panelDateStart, Calendar panelDateEnd){
          /*
        CalendarGUI has all the study blocks for two weeKS
        This function will provide the study blocks for specified dates so that day panels only get the list of study blocks they need
         */
        ArrayList<TaskBlock> studyBlocks = new ArrayList<>();
        for(int i = 0; i < studyBlocksList.size(); i++){
            if(TaskManager.datesBetweenEqualTo(panelDateStart, panelDateEnd, studyBlocksList.get(i).getStartTime())){
                studyBlocks.add(studyBlocksList.get(i));
            }
        }
        return studyBlocks;
    }

    private void viewCoursePopUp(){
         /*
        Pop up to view details on a course out of the list of courses currently present
         */
        String[] coursesList = listCoursesNames();
        if(coursesList.length == 0){
            JOptionPane.showMessageDialog(new JFrame(), "No courses are added. Nothing to view", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        JLabel courseName_label = new JLabel("Course Name of course to view:");

        JComboBox courseSelector = new JComboBox(coursesList);
        courseSelector.setSelectedIndex(0);

        myPanel.add(courseName_label);
        myPanel.add(courseSelector);

        int enteredInfo = JOptionPane.showConfirmDialog(null, myPanel, "Please enter task information.", JOptionPane.OK_CANCEL_OPTION);

        if(enteredInfo == JOptionPane.CLOSED_OPTION || enteredInfo == JOptionPane.CANCEL_OPTION) { return;}

        if (enteredInfo == JOptionPane.YES_OPTION) {
            String courseToDelete_Name = (String) courseSelector.getSelectedItem();

            ArrayList<Course> listOfCourses = TaskManager.getOurCourses();
            Course currentCourse = listOfCourses.get(TaskManager.findCourseIndex(courseToDelete_Name));

            JLabel name = new JLabel("Course Name: " + currentCourse.getCourseName());
            JLabel credits = new JLabel("Course Credits: " + currentCourse.getCredits());
            JLabel creditsMultiplier = new JLabel("Course Credits Multiplier: " + currentCourse.getCreditMultiplier());
            JLabel description = new JLabel("Course Description: " + currentCourse.getDescription());

            JPanel myPanelTwo = new JPanel();
            myPanelTwo.setLayout(new BoxLayout(myPanelTwo, BoxLayout.Y_AXIS));
            myPanelTwo.add(name);
            myPanelTwo.add(credits);
            myPanelTwo.add(creditsMultiplier);
            myPanelTwo.add(description);
            JOptionPane.showConfirmDialog(null, myPanelTwo, "Course Information.", JOptionPane.PLAIN_MESSAGE);
        }
    }

    private void popUpReport(){
        /*
        Pop up and method to generate a report
         */
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(2,4));

        Calendar startDefault = (Calendar) currentMonday.clone();
        int current_year = startDefault.get(Calendar.YEAR);
        String[] years = {Integer.toString(current_year-1), Integer.toString(current_year), Integer.toString(current_year+1)};
        String[] months = {"1","2","3","4","5","6","7","8","9","10","11","12"};
        String[] days = {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"};

        JLabel labelStartDate = new JLabel("Start Date:");
        labelStartDate.setToolTipText("YYYY/MM/DD");
        JTextField year_start = new JTextField(4);
        year_start.setText(years[1]);
        year_start.setToolTipText("Must be [" + years[0] + " , " + years[2] + "]");
        JTextField month_start = new JTextField(4);
        month_start.setText(Integer.toString(startDefault.get(Calendar.MONTH) + 1 ));
        JTextField date_start = new JTextField(4);
        date_start.setText(Integer.toString(startDefault.get(Calendar.DAY_OF_MONTH)));

        Calendar endDefault = Calendar.getInstance();
        endDefault.add(Calendar.DAY_OF_YEAR, 14);

        JLabel labelEndDate = new JLabel("End Date:");
        labelEndDate.setToolTipText("YYYY/MM/DD");
        JTextField year_end = new JTextField(4);
        year_end.setText(years[1]);
        year_end.setToolTipText("Must be [" + years[0] + " , " + years[2] + "]");
        JTextField month_end = new JTextField(4);
        month_end.setText(Integer.toString(endDefault.get(Calendar.MONTH) + 1));
        JTextField date_end = new JTextField(4);
        date_end.setText(Integer.toString(endDefault.get(Calendar.DAY_OF_MONTH)));

        myPanel.add(labelStartDate);
        myPanel.add(year_start);
        myPanel.add(month_start);
        myPanel.add(date_start);
        myPanel.add(labelEndDate);
        myPanel.add(year_end);
        myPanel.add(month_end);
        myPanel.add(date_end);

        boolean inputNotSuccess = true;
        int tries = 0;

        while(inputNotSuccess) {
            tries++;
            if (tries > 3) {
                JOptionPane.showMessageDialog(new JFrame(), "Exceeded number of tries allowed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                break;
            }

            int enteredInfo = JOptionPane.showConfirmDialog(null, myPanel, "Please enter Report information.", JOptionPane.OK_CANCEL_OPTION);

            int startYear_input = 0;
            int startMonth_input = 0;
            int startDay_input = 0;
            int endYear_input = 0;
            int endMonth_input = 0;
            int endDay_input = 0;

            if(enteredInfo == JOptionPane.CLOSED_OPTION || enteredInfo == JOptionPane.CANCEL_OPTION) { return;}

            if (enteredInfo == JOptionPane.YES_OPTION) {
                boolean isCorrectYear = false;
                for(int i = 0; i < years.length; i++){
                    if(year_start.getText().equals(years[i])){
                        isCorrectYear = true;
                    }
                }
                if(!isCorrectYear){
                    JOptionPane.showMessageDialog(new JFrame(), "Start Date is incorrect. Year is incorrect. Must be this year, next year, or previous year.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                isCorrectYear = false;
                for(int i = 0; i < years.length; i++){
                    if(year_end.getText().equals(years[i])){
                        isCorrectYear = true;
                    }
                }
                if(!isCorrectYear){
                    JOptionPane.showMessageDialog(new JFrame(), "End Date is incorrect. Year is incorrect. Must be this year, next year, or previous year.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                boolean isCorrectMonth = false;
                for(int i = 0; i < months.length; i++){
                    if(month_start.getText().equals(months[i])){
                        isCorrectMonth = true;
                    }
                }
                if(!isCorrectMonth){
                    JOptionPane.showMessageDialog(new JFrame(), "Start Date is incorrect. Month is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                isCorrectMonth = false;
                for(int i = 0; i < months.length; i++){
                    if(month_end.getText().equals(months[i])){
                        isCorrectMonth = true;
                    }
                }
                if(!isCorrectMonth){
                    JOptionPane.showMessageDialog(new JFrame(), "End Date is incorrect. Month is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                boolean isCorrectDay = false;
                for(int i = 0; i < days.length; i++){
                    if(date_start.getText().equals(days[i])){
                        isCorrectDay = true;
                    }
                }
                if(!isCorrectDay){
                    JOptionPane.showMessageDialog(new JFrame(), "Start Date is incorrect. Day of month is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                isCorrectDay = false;
                for(int i = 0; i < days.length; i++){
                    if(date_end.getText().equals(days[i])){
                        isCorrectDay = true;
                    }
                }
                if(!isCorrectDay){
                    JOptionPane.showMessageDialog(new JFrame(), "End Date is incorrect. Day of month is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                try {
                    startYear_input = Integer.parseInt(year_start.getText());
                    startMonth_input = Integer.parseInt(month_start.getText());
                    startDay_input = Integer.parseInt(date_start.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(new JFrame(), "Start Date is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                try {
                    endYear_input = Integer.parseInt(year_end.getText());
                    endMonth_input = Integer.parseInt(month_end.getText());
                    endDay_input = Integer.parseInt(date_end.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(new JFrame(), "End Date is incorrect.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                Calendar startDate = Calendar.getInstance();
                startDate.set(Calendar.YEAR, startYear_input);
                startDate.set(Calendar.MONTH, startMonth_input - 1);
                int lastDateStart = startDate.getActualMaximum(Calendar.DAY_OF_MONTH);

                Calendar endDate = Calendar.getInstance();
                endDate.set(Calendar.YEAR, endYear_input);
                endDate.set(Calendar.MONTH, endMonth_input - 1);
                int lastDateEnd = endDate.getActualMaximum(Calendar.DAY_OF_MONTH);

                if (startDay_input > lastDateStart) {
                    JOptionPane.showMessageDialog(new JFrame(), "Start date is not correct. The month does not contain this date", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                if (endDay_input > lastDateEnd) {
                    JOptionPane.showMessageDialog(new JFrame(), "End date is not correct. The month does not contain this date", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                startDate.set(Calendar.DAY_OF_MONTH, startDay_input);
                endDate.set(Calendar.DAY_OF_MONTH, endDay_input);

                if (startDate.after(endDate)) {
                    JOptionPane.showMessageDialog(new JFrame(), "End date cannot be after start date.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                inputNotSuccess = false; // when passes we can break out of the loop as input is no longer needed
                new Report(startDate.getTime(), endDate.getTime());
            }
        }
    }


    private void getNextWeek(){
        /*
        Changes the day panels dates to the following week
         */
        currentMonday.add(Calendar.DAY_OF_YEAR, 7);
        Calendar dayIterator = (Calendar) currentMonday.clone();

        for (int day = 0; day < numDays; day++) {
            panelDays[day].changePanelDay(dayIterator);
            dayIterator.add(Calendar.DATE, 1);
        }
    }

    public void getThisWeek() {
        /*
        Changes the day panels date to this current week
         */
        Calendar dayIterator = (Calendar) currentMonday.clone();
        for (int i = 0; i < numDays; i++) {
            panelDays[i].changePanelDay(dayIterator);
            dayIterator.add(Calendar.DATE, 1);
        }
    }

    private void getPreviousWeek(){
        /*
        Changes the day panels dates to the previous week
         */
        currentMonday.add(Calendar.DAY_OF_YEAR, (-1)*7);
        Calendar dayIterator = (Calendar) currentMonday.clone();

        for (int day = 0; day < numDays; day++) {
            panelDays[day].changePanelDay(dayIterator);
            dayIterator.add(Calendar.DATE, 1);
        }
    }

    private String pickDate(){
        JLabel labelDate = new JLabel("Select Date");
        JPanel myPanel = new JPanel();
        String[] dayOptions = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
        dayToSelect = new JComboBox(dayOptions);
        dayToSelect.setSelectedIndex(0);
        myPanel.add(labelDate);
        myPanel.add(dayToSelect);

        int enteredInfo = JOptionPane.showConfirmDialog(null, myPanel, "Please enter task information.", JOptionPane.OK_CANCEL_OPTION);
        if(enteredInfo == JOptionPane.YES_OPTION){
            return (String)dayToSelect.getSelectedItem();
        }
        return "None";
    }

    static public Color getColorByCourse(Color courseColor, String objectType){
        /*
        Gets the colour of an object of a certain type and course colour
         */
        if(objectType.equals(TaskEnum.QUIZ.getLabel()) || objectType.equals(TaskEnum.ASSIGNMENT.getLabel())){
            return ColourList.getLightestColour(courseColor);
        }
        else if(objectType.equals(TaskEnum.STUDYBLOCK.getLabel())){
            return ColourList.getDarkerColour(courseColor);
        }
        else{
            return ColourList.getDarkestColour(courseColor);
        }
    }

    static public Color getBorderColorByCourse(Color courseColor){
        return ColourList.getBorderColour(courseColor);
    }

    static public String[] listCoursesNames(){
        /*
        Returns a list of all the course names of all courses currently present
         */
        ArrayList<Course> courseList = TaskManager.getOurCourses();
        String[] courseNamesList = new String[courseList.size()];
        for(int i = 0; i < courseList.size(); i++){ courseNamesList[i] = courseList.get(i).getCourseName(); }
        return courseNamesList;
    }

    private boolean containsCourseAlready(String name){
        /*
       Checks if the specified course is present in the current list of courses
         */
        String[] coursesList = listCoursesNames();

        for(int i = 0; i < coursesList.length; i++){
            if(coursesList[i].equals(name)){ return true;}
        }
        return false;
    }

    private void CourseDeletePopUpMenuItem(){
        /*
        The popup and method to delete a specified course properly
        Will only let you delete if courses are present to delete
         */
        String[] coursesList = listCoursesNames();
        if(coursesList.length == 0){
            JOptionPane.showMessageDialog(new JFrame(), "No courses are added. Nothing to delete", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        JLabel courseName_label = new JLabel("Course Name of course to delete:");

        JComboBox courseSelector = new JComboBox(coursesList);
        courseSelector.setSelectedIndex(0);

        myPanel.add(courseName_label);
        myPanel.add(courseSelector);

        int enteredInfo = JOptionPane.showConfirmDialog(null, myPanel, "Please enter task information.", JOptionPane.OK_CANCEL_OPTION);

        if(enteredInfo == JOptionPane.CLOSED_OPTION || enteredInfo == JOptionPane.CANCEL_OPTION) { return;}

        if (enteredInfo == JOptionPane.YES_OPTION) {
            String courseToDelete_Name = (String)courseSelector.getSelectedItem();
            boolean passedDelete = TaskManager.deleteCourse(courseToDelete_Name);

            if(!passedDelete){
                JOptionPane.showMessageDialog(new JFrame(), "Course could not be edited successfully.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else{
                for(int i = 0; i < numDays; i++){
                    panelDays[i].redrawBlocks();
                }
            }
        }
    }

    private void CourseAddPopUpMenuItem(){
          /*
        The popup and method to add a specified course properly
         */
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        JLabel courseName_label = new JLabel("Course Name*:");
        JTextField courseName_Input = new JTextField(10);
        JLabel description_label = new JLabel("Description:");
        JTextField description_Input = new JTextField(10);
        JLabel credit_label = new JLabel("Credit*:");
        JTextField credit_Input = new JTextField(1);
        credit_label.setToolTipText("Input the credits/units for the course. Either 1, 2, 3, 4, or 5.");
        JLabel creditMultiplier_label = new JLabel("Credit multiplier:");
        JTextField creditMultiplier_Input = new JTextField(1);
        creditMultiplier_label.setToolTipText("Input what you believe the credits/units for the course should have been. Either 1, 2, 3, 4, or 5.");
        JLabel courseColor_label = new JLabel("Colour*:");
        courseColor_label.setToolTipText("What colour you want used for the calendar.");
        String[] listOptions = {ColourList.PURPLE.getName(), ColourList.PINK.getName(), ColourList.GREEN.getName(), ColourList.ORANGE.getName(), ColourList.BLUE.getName()};
        JComboBox courseColor_input = new JComboBox(listOptions);
        courseColor_input.setSelectedIndex(0);

        myPanel.add(courseName_label);
        myPanel.add(courseName_Input);
        myPanel.add(description_label);
        myPanel.add(description_Input);
        myPanel.add(credit_label);
        myPanel.add(credit_Input);
        myPanel.add(creditMultiplier_label);
        myPanel.add(creditMultiplier_Input);
        myPanel.add(courseColor_label);
        myPanel.add(courseColor_input);


        boolean inputNotSuccess = true;
        int tries = 0;

        while(inputNotSuccess) {
            tries++;
            if(tries > 3){
                JOptionPane.showMessageDialog(new JFrame(), "Exceeded number of tries allowed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                break;
            } //After 3 tries, close the window (no more input allowed)

            int enteredInfo = JOptionPane.showConfirmDialog(null, myPanel, "Please enter task information.", JOptionPane.OK_CANCEL_OPTION);

            if(enteredInfo == JOptionPane.CLOSED_OPTION || enteredInfo == JOptionPane.CANCEL_OPTION) { return;}

            if (enteredInfo == JOptionPane.YES_OPTION) {
                //Ensure no required fields are empty
                if(courseName_Input.getText().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(), "Course name is a required field", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                if(credit_Input.getText().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(), "Course credits is a required field", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                //Read input (no validity check needed)
                String description = description_Input.getText();
                String colourSelected = (String)courseColor_input.getSelectedItem();
                String courseName = courseName_Input.getText();
                int courseCredits = 0;
                int courseDesiredCredits = 0;

                //Check input validity
                if(containsCourseAlready(courseName)){
                    JOptionPane.showMessageDialog(new JFrame(), "Course already present", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                //Check if non numeric
                try {
                    courseCredits = Integer.parseInt(credit_Input.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(new JFrame(), "Course credit is incorrect. Input must be an integer.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                if(courseCredits != 1 && courseCredits != 2 && courseCredits != 3 && courseCredits != 4 && courseCredits != 5){
                    JOptionPane.showMessageDialog(new JFrame(), "Course credit is incorrect. Input must be either 1, 2, 3, 4, or 5 .", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                if(!creditMultiplier_Input.getText().equals("")) {
                    try {
                        courseDesiredCredits = Integer.parseInt(creditMultiplier_Input.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(new JFrame(), "Course credit multiplier is incorrect. Input must be an integer.", "Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                    if (courseDesiredCredits != 1 && courseDesiredCredits != 2 && courseDesiredCredits != 3 && courseDesiredCredits != 4 && courseDesiredCredits != 5) {
                        JOptionPane.showMessageDialog(new JFrame(), "Course credit multiplier is incorrect. Input must be either 1, 2, 3, 4, or 5 .", "Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                }

                inputNotSuccess = false; // when passes we can break out of the loop as input is no longer needed
                boolean passedAdd = TaskManager.addCourse(courseName, description, courseCredits, courseDesiredCredits, ColourList.getColorByName(colourSelected));
                if(!passedAdd){
                    JOptionPane.showMessageDialog(new JFrame(), "Course could not be added successfully.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void CourseEditSpecific(String defaultName, String defaultDescription, int defaultCredit, int defaultMultiplier, String defaultColour){
        /*
        The popup and method to edit a specified course properly
         */
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        JLabel courseName_label = new JLabel("Course Name*:");
        JTextField courseName_Input = new JTextField(10);
        courseName_Input.setText(defaultName);
        JLabel description_label = new JLabel("Description:");
        JTextField description_Input = new JTextField(10);
        description_Input.setText(defaultDescription);
        JLabel credit_label = new JLabel("Credit*:");
        JTextField credit_Input = new JTextField(1);
        credit_Input.setText(Integer.toString(defaultCredit));
        credit_label.setToolTipText("Input the credits/units for the course. Either 1, 2, 3, 4, or 5.");
        JLabel creditMultiplier_label = new JLabel("Credit Multiplier:");
        creditMultiplier_label.setToolTipText("Input what you believe the credits/units for the course should have been. Either 1, 2, 3, 4, or 5.");
        JTextField creditMultiplier_Input = new JTextField(1);
        if(defaultMultiplier!=0) { creditMultiplier_Input.setText(Integer.toString(defaultMultiplier)); }
        JLabel courseColor_label = new JLabel("Colour*:");
        courseColor_label.setToolTipText("What colour you want used for the calendar.");
        String[] listOptions = {ColourList.PURPLE.getName(), ColourList.PINK.getName(), ColourList.GREEN.getName(), ColourList.ORANGE.getName(), ColourList.BLUE.getName()};
        JComboBox courseColor_input = new JComboBox(listOptions);
        if(defaultColour.equals(ColourList.PINK.getName())) {courseColor_input.setSelectedIndex(1);}
        else if(defaultColour.equals(ColourList.GREEN.getName())) {courseColor_input.setSelectedIndex(2);}
        else if(defaultColour.equals(ColourList.ORANGE.getName())) {courseColor_input.setSelectedIndex(3);}
        else if(defaultColour.equals(ColourList.BLUE.getName())) {courseColor_input.setSelectedIndex(4);}
        else {courseColor_input.setSelectedIndex(0);}

        myPanel.add(courseName_label);
        myPanel.add(courseName_Input);
        myPanel.add(description_label);
        myPanel.add(description_Input);
        myPanel.add(credit_label);
        myPanel.add(credit_Input);
        myPanel.add(creditMultiplier_label);
        myPanel.add(creditMultiplier_Input);
        myPanel.add(courseColor_label);
        myPanel.add(courseColor_input);

        boolean inputNotSuccess = true;
        int tries = 0;

        while(inputNotSuccess) {
            tries++;
            if(tries > 3){
                JOptionPane.showMessageDialog(new JFrame(), "Exceeded number of tries allowed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                break;
            } //After 3 tries, close the window (no more input allowed)

            int enteredInfo = JOptionPane.showConfirmDialog(null, myPanel, "Please enter task information.", JOptionPane.OK_CANCEL_OPTION);

            if(enteredInfo == JOptionPane.CLOSED_OPTION || enteredInfo == JOptionPane.CANCEL_OPTION) { return;}

            if (enteredInfo == JOptionPane.YES_OPTION) {
                //Ensure no required fields are empty
                if(courseName_Input.getText().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(), "Course name is a required field", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                if(credit_Input.getText().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(), "Course credits is a required field", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                //Read input (no validity check needed)
                String description = description_Input.getText();
                String colourSelected = (String)courseColor_input.getSelectedItem();
                String courseName = courseName_Input.getText();
                int courseCredits = 0;
                int courseDesiredCredits = 0;

                //Check input validity
                if(containsCourseAlready(courseName) && !courseName.equals(defaultName)){
                    JOptionPane.showMessageDialog(new JFrame(), "Course already present", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                //Check if non numeric
                try {
                    courseCredits = Integer.parseInt(credit_Input.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(new JFrame(), "Course credit is incorrect. Input must be an integer.", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                if(courseCredits != 1 && courseCredits != 2 && courseCredits != 3 && courseCredits != 4 && courseCredits != 5){
                    JOptionPane.showMessageDialog(new JFrame(), "Course credit is incorrect. Input must be either 1, 2, 3, 4, or 5 .", "Error", JOptionPane.ERROR_MESSAGE);
                    continue;
                }

                if(!creditMultiplier_Input.getText().equals("")) {
                    try {
                        courseDesiredCredits = Integer.parseInt(creditMultiplier_Input.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(new JFrame(), "Course credit multiplier is incorrect. Input must be an integer.", "Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                    if (courseDesiredCredits != 1 && courseDesiredCredits != 2 && courseDesiredCredits != 3 && courseDesiredCredits != 4 && courseDesiredCredits != 5) {
                        JOptionPane.showMessageDialog(new JFrame(), "Course credit multiplier is incorrect. Input must be either 1, 2, 3, 4, or 5 .", "Error", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                }

                inputNotSuccess = false; // when passes we can break out of the loop as input is no longer needed
                boolean passedEdit = TaskManager.editCourse(defaultName,courseName,description,courseCredits,courseDesiredCredits, ColourList.getColorByName(colourSelected));
                if(!passedEdit){
                    JOptionPane.showMessageDialog(new JFrame(), "Course could not be edited successfully.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }


    private void CourseEditPopUpMenuItem(){
         /*
        The popup and method to edit a course properly, only if courses are present to edit
         */
        String[] coursesList = listCoursesNames();
        if(coursesList.length == 0){
            JOptionPane.showMessageDialog(new JFrame(), "No courses are added. Nothing to edit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new BoxLayout(myPanel, BoxLayout.Y_AXIS));
        JLabel courseName_label = new JLabel("Course Name of course to edit:");
        JComboBox courseSelector = new JComboBox(coursesList);
        courseSelector.setSelectedIndex(0);

        myPanel.add(courseName_label);
        myPanel.add(courseSelector);

        int enteredInfo = JOptionPane.showConfirmDialog(null, myPanel, "Please enter task information.", JOptionPane.OK_CANCEL_OPTION);

        if (enteredInfo == JOptionPane.CLOSED_OPTION || enteredInfo == JOptionPane.CANCEL_OPTION) {
            return;
        }

        if (enteredInfo == JOptionPane.YES_OPTION) {
            String courseToDelete_Edit = (String) courseSelector.getSelectedItem();
            Course editCourse = getSpecifiedCourse(courseToDelete_Edit);
            CourseEditSpecific(editCourse.getCourseName(), editCourse.getDescription(), editCourse.getCredits(), editCourse.getCreditMultiplier(), ColourList.getColourObject(editCourse.getColour()));
        }

    }

    private Course getSpecifiedCourse(String courseName){
        /*
        Get the course object based on the course name provided
        Returns the first element if no course is found
         */
        ArrayList<Course> courseList = TaskManager.getOurCourses();
        for(int i = 0; i < courseList.size(); i++){
            if(courseList.get(i).getCourseName().equals(courseName)) {
                return courseList.get(i);
            }
        }
        return courseList.get(0);
    }

    static public int getStartHr() { return startHr; }
    static public int getMaxHourAllowed() { return maxHourAllowed; }
    static public int getMaxMinValue() { return maxMinValue; }

    static public void editBlock(TaskBlock blockToEdit){
         /*
        This function can be used to edit a block to a day panel
        It edits the task block that is passed in
         */
        int dayOfWeek = blockToEdit.getStartTime().get(Calendar.DAY_OF_WEEK); //Sat = 7. Sun = 1
        if(dayOfWeek == 2){
            panelDays[0].editPopUp(blockToEdit.getStartTime(), blockToEdit.getEndTime(), blockToEdit.getPriority(), blockToEdit.getTaskName(), blockToEdit.getDescription(), blockToEdit.getItemType(), blockToEdit.getCourseName(), blockToEdit.getRecurring());
        }
        else if(dayOfWeek == 3){
            panelDays[1].editPopUp(blockToEdit.getStartTime(), blockToEdit.getEndTime(), blockToEdit.getPriority(), blockToEdit.getTaskName(), blockToEdit.getDescription(), blockToEdit.getItemType(), blockToEdit.getCourseName(), blockToEdit.getRecurring());
        }
        else if(dayOfWeek == 4){
            panelDays[2].editPopUp(blockToEdit.getStartTime(), blockToEdit.getEndTime(), blockToEdit.getPriority(), blockToEdit.getTaskName(), blockToEdit.getDescription(), blockToEdit.getItemType(), blockToEdit.getCourseName(), blockToEdit.getRecurring());
        }
        else if(dayOfWeek == 5){
            panelDays[3].editPopUp(blockToEdit.getStartTime(), blockToEdit.getEndTime(), blockToEdit.getPriority(), blockToEdit.getTaskName(), blockToEdit.getDescription(), blockToEdit.getItemType(), blockToEdit.getCourseName(), blockToEdit.getRecurring());
        }
        else if(dayOfWeek == 6){
            panelDays[4].editPopUp(blockToEdit.getStartTime(), blockToEdit.getEndTime(), blockToEdit.getPriority(), blockToEdit.getTaskName(), blockToEdit.getDescription(), blockToEdit.getItemType(), blockToEdit.getCourseName(), blockToEdit.getRecurring());
        }
        else if(dayOfWeek == 7){
            panelDays[5].editPopUp(blockToEdit.getStartTime(), blockToEdit.getEndTime(), blockToEdit.getPriority(), blockToEdit.getTaskName(), blockToEdit.getDescription(), blockToEdit.getItemType(), blockToEdit.getCourseName(), blockToEdit.getRecurring());
        }
        else if(dayOfWeek == 1){
            panelDays[6].editPopUp(blockToEdit.getStartTime(), blockToEdit.getEndTime(), blockToEdit.getPriority(), blockToEdit.getTaskName(), blockToEdit.getDescription(), blockToEdit.getItemType(), blockToEdit.getCourseName(), blockToEdit.getRecurring());
        }

    }


    static public void deleteBlock(TaskBlock blockToDelete){
        /*
        This function can be used to delete a block to a day panel
        It deletes the task block that is passed in
         */
        int dayOfWeek = blockToDelete.getStartTime().get(Calendar.DAY_OF_WEEK); //Sat = 7. Sun = 1
        if(dayOfWeek == 2){
            panelDays[0].deleteSpecifiedBlock(blockToDelete);
        }
        else if(dayOfWeek == 3){
            panelDays[1].deleteSpecifiedBlock(blockToDelete);
        }
        else if(dayOfWeek == 4){
            panelDays[2].deleteSpecifiedBlock(blockToDelete);
        }
        else if(dayOfWeek == 5){
            panelDays[3].deleteSpecifiedBlock(blockToDelete);
        }
        else if(dayOfWeek == 6){
            panelDays[4].deleteSpecifiedBlock(blockToDelete);
        }
        else if(dayOfWeek == 7){
            panelDays[5].deleteSpecifiedBlock(blockToDelete);
        }
        else if(dayOfWeek == 1){
            panelDays[5].deleteSpecifiedBlock(blockToDelete);
        }

    }

    static public void addBlock(Calendar startTime){
         /*
        This function can be used to add a block to a day panel in a specified date (startTime)
        It calls the popup for the corresponding day panel
         */
        int dayOfWeek = startTime.get(Calendar.DAY_OF_WEEK); //Sat = 7. Sun = 1
        int hourStart = startTime.get(Calendar.HOUR_OF_DAY);
        if(dayOfWeek == 2){
            panelDays[0].popUpMenu(hourStart);
        }
        else if(dayOfWeek == 3){
            panelDays[1].popUpMenu(hourStart);
        }
        else if(dayOfWeek == 4){
            panelDays[2].popUpMenu(hourStart);
        }
        else if(dayOfWeek == 5){
            panelDays[3].popUpMenu(hourStart);
        }
        else if(dayOfWeek == 6){
            panelDays[4].popUpMenu(hourStart);
        }
        else if(dayOfWeek == 7){
            panelDays[5].popUpMenu(hourStart);
        }
        else if(dayOfWeek == 1){
            panelDays[5].popUpMenu(hourStart);
        }
    }

    static public ArrayList<TaskBlock> getWeeksTaskBlocks(){
        /*
        Get all the weeks blocks that are generated with the proper colouring
         */
        ArrayList<TaskBlock> updatedListBlocks = new ArrayList<>();
        String[] courseNames = CalendarGUI.listCoursesNames();
        for(int i =0; i < courseNames.length; i++) {
            updatedListBlocks.addAll(addTaskBlocksWithColouring(courseNames[i]));
        }
        return updatedListBlocks;
    }

    static private ArrayList<TaskBlock> addTaskBlocksWithColouring(String courseName){
        /*
        Returns task blocks for a specified course with the correct colouring applied
         */

        Calendar endWeek = (Calendar) thisWeeksMonday.clone();
        endWeek.add(Calendar.DATE, 7);
        ArrayList<TaskBlock> courseTaskBlocks = TaskManager.getTaskBlocks(courseName, thisWeeksMonday, endWeek);

        //Get course colour
        ArrayList<Course> listOfCourses = TaskManager.getOurCourses();
        Course currentCourse = listOfCourses.get(TaskManager.findCourseIndex(courseName));
        Color courseColor = currentCourse.getColour();

        //Now that you have the specific course's colour, apply the correct colouring to all its task blocks
        for(int i = 0; i < courseTaskBlocks.size(); i++){
            Color taskColor = CalendarGUI.getColorByCourse(courseColor, courseTaskBlocks.get(i).getItemType());
            courseTaskBlocks.get(i).setColour(taskColor);
            courseTaskBlocks.get(i).resetColour();
        }
        return courseTaskBlocks;
    }

}

